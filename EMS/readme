maven setup
1.check whether java is installed.
    CMD ->Java -version
2.JAVA_HOME ->SYSTEM ENVIRONMENT VARIABLES ->NEW ->JAVA_HOME ->C:\Program Files\Java\jdk1.8.0_161
3.DOWNLOAD maven
4.unzip maven to C:\apache-maven-3.5.0
5.CMD ->MAVEN_HOME ->SYSTEM ENVIRONMENT VARIABLES ->NEW ->MAVEN_HOME ->C:\apache-maven-3.5.0
ADD NEW VARIABLES
6.check whether maven is installed.
    CMD ->MAVEN -version



POM - PROJECT OBJECT MODEL(.XML)

1. pom.xml is the file that contains all the configuration information of the project.
2. It is an XML file that contains information about the project and configuration details used by Maven to build the project.
3. It contains the following information:
   1. Project dependencies
   2. Project plugins
   3. Goals
   4. Build profiles
   5. Project versioning information
4.ARTIFACT ID ->UNIQUE IDENTIFIER FOR THE PROJECT
5.GROUP ID ->UNIQUE IDENTIFIER FOR THE GROUP OF PROJECTS
6.VERSION ->VERSION OF THE PROJECT
7.PACKAGING ->TYPE OF PROJECT (JAR, WAR, EAR)


for an error free code
1.prepare
2.validate
3.compile
4.test
5.package
6.install
7.deploy

mvn clean dependency:copy-dependencies package
mvn clean install

build profile is configurationvalures used for overriding maven defaultvalues.
3 types
1. per project
2.per user
3.global




FRAMEWORKS



âœ¨âœ¨âœ¨GRADLE
1.build tool
2.similar to maven
3. drawback ;xml ws used for build script formatting.
xml is bit difficult to manage
4.graddle is availabe via domain specific language(dsl) based on groovy language.
5.API support
6.multi project support
7.open source

GROOVY
used for developing graddle api
 
 GRADLE BUILD SCRIPTS
 projects->JAR/WAR
 tasks-> tasks for a build

we need a static page (html)
tomcat server is used to deploy the static page.it store war files.
1.download setup apache -web server XAMPP.
2.mysql.
3.apache,ngnix donot support out file so we use tomcat.
4.XAMPP- OS, APACHE,MYSQL,PERL,PHP, PYTHON.
Tomcat is a web server and servlet container developed by the Apache Software Foundation (ASF) for running Java servlets and JSPs.


ðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸWith Spring Boot, you donâ€™t need Tomcat separately â€” itâ€™s embedded.ðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸðŸŒŸ

LOG4J2
for storing data in various categories.

Spring Boot is a Java-based framework used to create stand-alone, production-grade Spring-based applications. It is built on top of the Spring Framework and provides a simplified way to configure and deploy Spring applications. Spring Boot eliminates the need for complex XML configuration files and allows developers to get started quickly with minimal setup.
lightweight framework
inversion of contro(ioc)  
container
aspect oriented programming
transaction management
jdbc exception handling


module
1.AOP 2.ORM 3.WEB 4.DAO 5.CONTEXT 6. WEB MVC 7.SECURITY 8.CORE



SEE STRUCTURE BUDDY
Browser (user) 
   â†“ sends request to "/"
Spring Boot Application
   â†“
HomeController (handles "/")
   â†“
home() method returns "index"
   â†“
Spring looks into /src/main/resources/templates/
   â†“
Finds index.html
   â†“
Sends HTML back to browser!





com.example.ems
 â”œâ”€â”€ controllers
 â”‚    â””â”€â”€ HomeController.java (handles / home page)
 â”‚    â””â”€â”€ EmployeeController.java (handles /employees stuff)
 â”œâ”€â”€ models
 â”‚    â””â”€â”€ Employee.java (fields: id, name, department, salary)
 â”œâ”€â”€ services
 â”‚    â””â”€â”€ EmployeeService.java (logic: add employee, update employee)
 â”œâ”€â”€ repositories
 â”‚    â””â”€â”€ EmployeeRepository.java (extends JpaRepository<Employee, Long>)
 â”œâ”€â”€ EmsApplication.java (your main @SpringBootApplication class)


SPRING Ioc
1.dependency injection
2.object defines its dependencies via constructor or its arguments to a factory method or property that the instance sets for the object past construction.
3.internal software used for creating main objects and dependent objects.
4.Ioc Takes care of doing DI and gives us object.
5.Ioc (inversion of control) ->reversal of regular flow.
In spring we have 3 different di
1.settler injection
2.constructor injection
3.argument to factory method.

IOC container has two 
   1.Bean factory. ->>org.springfarmework.beans
   2.Application context.->>org.springframework.context

bean factory is an interface which provides configuratio mechanism which can manage objects and provide functionalities.
application context is a sub part odf bean factory which gives it more specific functionality or enterprise specific functionality.

